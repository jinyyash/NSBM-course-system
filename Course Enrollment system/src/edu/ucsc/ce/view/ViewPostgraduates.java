/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ucsc.ce.view;

import edu.ucsc.ce.controllers.CourseController;
import edu.ucsc.ce.controllers.Facultycontroller;
import edu.ucsc.ce.controllers.StudentController;
import edu.ucsc.ce.models.CourseDTO;
import edu.ucsc.ce.models.FacultyDTO;
import edu.ucsc.ce.models.PostgraduateDTO;
import edu.ucsc.ce.models.UndergraduateDTO;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jinadi
 */
public class ViewPostgraduates extends javax.swing.JPanel {

    /**
     * Creates new form ViewUndergraduates
     */
    public static ArrayList<CourseDTO> courseL = new ArrayList<>();
    public static ArrayList<FacultyDTO> facL = new ArrayList<>();

    public ViewPostgraduates() {
        initComponents();
        loadCourse();
        loadFca();
        selectAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbFac = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbBatch = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setOpaque(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Faculty");

        cmbFac.setEditable(true);
        cmbFac.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbFac.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        cmbFac.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFacItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Course");

        cmbCourse.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        cmbCourse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCourseItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Batch");

        cmbBatch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbBatch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "2018", "2017", "2016", "2015", "2014" }));
        cmbBatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBatchItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbFac, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbFac, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIC", "Name", "Faculty", "Course"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 780, 390));
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFacItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFacItemStateChanged
        selectUndergraduate();
    }//GEN-LAST:event_cmbFacItemStateChanged

    private void cmbCourseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCourseItemStateChanged
        selectUndergraduate();
    }//GEN-LAST:event_cmbCourseItemStateChanged

    private void cmbBatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBatchItemStateChanged
        selectUndergraduate();        // TODO add your handling code here:
    }//GEN-LAST:event_cmbBatchItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbBatch;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JComboBox<String> cmbFac;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void selectUndergraduate() {
        if (cmbFac.getSelectedIndex() == 0 && cmbCourse.getSelectedIndex() == 0 && cmbBatch.getSelectedIndex() == 0) {
            selectAll();
        } else if (cmbFac.getSelectedIndex() != 0 && cmbCourse.getSelectedIndex() == 0 && cmbBatch.getSelectedIndex() == 0) {
            selectFromFac();
        } else if (cmbFac.getSelectedIndex() != 0 && cmbCourse.getSelectedIndex() != 0 && cmbBatch.getSelectedIndex() == 0) {
            selectFromCourse();
        } else if (cmbFac.getSelectedIndex() != 0 && cmbCourse.getSelectedIndex() != 0 && cmbBatch.getSelectedIndex() != 0) {
            selectFromBatch();
        }
    }

    private void selectAll() {
        try {
            ArrayList<UndergraduateDTO> graduates = StudentController.getAllUndergraduate();
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            for (UndergraduateDTO graduate : graduates) {
                Object row[] = {graduate.getStudentDTO().getNIC(), graduate.getStudentDTO().getName(), graduate.getStudentDTO().getFacultyDTO().getName(), graduate.getStudentDTO().getCourseDTO().getName()};
                dtm.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void selectFromFac() {
        try {
            ArrayList<PostgraduateDTO> graduates = StudentController.getAllPostgraduate();
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            for (PostgraduateDTO graduate : graduates) {
                if (graduate.getStudentDTO().getFacultyDTO().getFid().equals(facL.get(cmbFac.getSelectedIndex() - 1).getFid())) {
                    Object row[] = {graduate.getStudentDTO().getNIC(), graduate.getStudentDTO().getName(), graduate.getStudentDTO().getFacultyDTO().getName(), graduate.getStudentDTO().getCourseDTO().getName()};
                    dtm.addRow(row);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void selectFromCourse() {
        try {
            ArrayList<PostgraduateDTO> graduates = StudentController.getAllPostgraduate();
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            for (PostgraduateDTO graduate : graduates) {
                if (graduate.getStudentDTO().getFacultyDTO().getFid().equals(facL.get(cmbFac.getSelectedIndex() - 1).getFid()) && graduate.getStudentDTO().getCourseDTO().getCid().equals(courseL.get(cmbCourse.getSelectedIndex() - 1).getCid())) {
                    Object row[] = {graduate.getStudentDTO().getNIC(), graduate.getStudentDTO().getName(), graduate.getStudentDTO().getFacultyDTO().getName(), graduate.getStudentDTO().getCourseDTO().getName()};
                    dtm.addRow(row);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void selectFromBatch() {
        try {
            ArrayList<PostgraduateDTO> graduates = StudentController.getAllPostgraduate();

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);
            for (PostgraduateDTO graduate : graduates) {
                if (graduate.getStudentDTO().getFacultyDTO().getFid().equals(facL.get(cmbFac.getSelectedIndex() - 1).getFid()) && graduate.getStudentDTO().getCourseDTO().getCid().equals(courseL.get(cmbCourse.getSelectedIndex() - 1).getCid()) && graduate.getStudentDTO().getBatch().equals(cmbBatch.getSelectedItem())) {
                    Object row[] = {graduate.getStudentDTO().getNIC(), graduate.getStudentDTO().getName(), graduate.getStudentDTO().getFacultyDTO().getName(), graduate.getStudentDTO().getCourseDTO().getName()};
                    dtm.addRow(row);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPostgraduates.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadCourse() {
        try {
            courseL = CourseController.getAll();
            for (CourseDTO courseDTO : courseL) {
                cmbCourse.addItem(courseDTO.getName());
            }
            //ComboBoxFilling combo = new ComboBoxFilling();
            // combo.setSearchableCombo(cmbCourse, true, "No Course found");
        } catch (SQLException ex) {
            Logger.getLogger(AddSubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddSubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadFca() {
        try {
            facL = Facultycontroller.getAll();
            for (FacultyDTO courseDTO : facL) {
                cmbFac.addItem(courseDTO.getName());
            }
            //ComboBoxFilling combo = new ComboBoxFilling();
            // combo.setSearchableCombo(cmbfac, true, "No Course found");
        } catch (SQLException ex) {
            Logger.getLogger(AddSubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddSubjectForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
